<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Services\AiMemoryService;
use App\Models\AIChatHistory;

class WhatsAppController extends Controller
{
    private AiMemoryService $memoryService;

    public function __construct(AiMemoryService $memoryService)
    {
        $this->memoryService = $memoryService;
    }

    /**
     * Verifies the webhook for WhatsApp.
     */
    public function verify(Request $request)
    {
        Log::info('üì° Webhook verification attempt', ['query' => $request->query()]);

        $verifyToken = config('services.whatsapp.verify_token');

        $mode = $request->query('hub_mode');
        $token = $request->query('hub_verify_token');
        $challenge = $request->query('hub_challenge');

        if ($mode === 'subscribe' && $token === $verifyToken) {
            Log::info('‚úÖ Webhook verified successfully');
            return response($challenge, 200);
        }

        Log::warning('‚ùå Webhook verification failed', [
            'mode' => $mode,
            'provided_token' => $token,
            'expected_token' => $verifyToken
        ]);

        return response('Invalid verification token', 403);
    }

    /**
     * Handles incoming WhatsApp messages.
     */
    public function receiveMessage(Request $request)
    {
        Log::info('üì© Webhook message received', [
            'object' => $request->input('object'),
            'entry_id' => $request->input('entry.0.id'),
            'field' => $request->input('entry.0.changes.0.field')
        ]);

        try {
            $data = $request->all();
            $change = $data['entry'][0]['changes'][0]['value'] ?? [];

            if (isset($change['messages'][0])) {
                $message = $change['messages'][0];
                $from = $message['from'] ?? null;
                $text = $message['text']['body'] ?? null;

                Log::info('üì• Message extracted', ['from' => $from, 'text' => $text]);

                if ($from && $text) {
                    $aiResponse = $this->callAI($text, $from);

                    AIChatHistory::create([
                        'sender_number' => $from,
                        'user_message' => $text,
                        'ai_response' => $aiResponse,
                    ]);

                    Log::info('‚úÖ AI Response received', [
                        'to' => $from,
                        'user_message' => $text,
                        'ai_response' => $aiResponse
                    ]);

                    $this->sendMessage($from, $aiResponse);
                } else {
                    Log::warning('‚ö†Ô∏è Incomplete message received', ['message' => $message]);
                }
            } elseif (isset($change['statuses'][0])) {
                $status = $change['statuses'][0];
                Log::info('üìò Status update received', [
                    'id' => $status['id'] ?? null,
                    'status' => $status['status'] ?? null,
                    'recipient_id' => $status['recipient_id'] ?? null
                ]);
            } else {
                Log::warning('‚ö†Ô∏è No message or status content found in payload.');
                return response()->json(['status' => 'no_content_found'], 200);
            }

            return response()->json(['status' => 'received'], 200);
        } catch (\Exception $e) {
            Log::error('‚ùå Exception during webhook handling', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'status' => 'error',
                'message' => 'An unexpected error occurred'
            ], 500);
        }
    }

    /**
     * Send a reply back to the WhatsApp sender (placeholder).
     */
    private function sendMessage($to, $message)
    {
        try {
            $token = env('WHATSAPP_TOKEN');
            $phoneNumberId = env('WHATSAPP_PHONE_ID'); // ‚úÖ match your .env name

            if (!$token || !$phoneNumberId) {
                Log::error('‚ùå Missing WhatsApp credentials.');
                return ['error' => 'Missing credentials'];
            }

            $url = "https://graph.facebook.com/v22.0/{$phoneNumberId}/messages";

            Log::info('üì§ Sending WhatsApp message', [
                'to' => $to,
                'message' => $message
            ]);

            $response = Http::withToken($token)->post($url, [
                'messaging_product' => 'whatsapp',
                'to' => $to,
                'type' => 'text',
                'text' => [
                    'body' => $message
                ]
            ]);

            if ($response->successful()) {
                Log::info('‚úÖ Message sent successfully', $response->json());
            } else {
                Log::warning('‚ö†Ô∏è Failed to send message', [
                    'status' => $response->status(),
                    'response' => $response->body()
                ]);
            }

            return $response->json();
        } catch (\Exception $e) {
            Log::error('‚ùå Exception while sending message', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return ['error' => $e->getMessage()];
        }
    }

    /**
     * Calls the AI API and handles memory.
     */
    private function callAI(string $message, string $sender): string
    {
        $apiKey = config('services.openrouter.key');

        if (!$apiKey) {
            Log::error('‚ùå Missing OpenRouter API key');
            return 'ÿπÿ∞ÿ±Ÿãÿßÿå ŸÑÿß ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ™ŸÜŸÅŸäÿ∞ ÿ∑ŸÑÿ®ŸÉ ÿßŸÑÿ¢ŸÜ.';
        }

        // üßπ Clear memory if the user says thanks
        if (preg_match('/ÿ¥ŸÉÿ±ÿßŸã|ÿ¥ŸÉÿ±ÿß|ÿ¥ŸÉÿ±Ÿãÿß ŸÖÿ≥ÿßÿπÿØ/i', $message)) {
            $this->memoryService->clearMemory($sender);
            return 'ÿπŸÑŸâ ÿßŸÑÿ±ÿ≠ÿ® ŸàÿßŸÑÿ≥ÿπÿ©! ÿ•ÿ∞ÿß ÿßÿ≠ÿ™ÿ¨ÿ™ ÿ£Ÿä ÿÆÿØŸÖÿ©ÿå ÿ£ŸÜÿß ŸÖŸàÿ¨ŸàÿØ ÿØÿßÿ¶ŸÖŸãÿß üßΩ‚ú®';
        }

        $history = $this->memoryService->getHistory($sender);

        $systemPrompt = [
            'role' => 'system',
            'content' => <<<EOT
    You are ŸÖÿ≥ÿßÿπÿØ, a smart and friendly AI assistant for JanPro, a B2B cleaning services company.
    
    Introduce yourself only once at the beginning of each new conversation. Then, engage in a natural, professional, and approachable tone. Prioritize understanding the customer's business needs and provide clear, concise responses.
    
    Instructions:
    
    You represent JanPro, which provides professional cleaning services to businesses and organizations.
    
    You are responsible for answering customer inquiries related to JanPro‚Äôs services.
    
    If a user requests contact details for managers, provide the following static contact numbers: ‚Ä¢ ŸÖÿØŸäÿ± ÿßŸÑÿØÿπŸÖ: 0500000001
    ‚Ä¢ ŸÖÿØŸäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™: 0500000002
    
    Proactively suggest services from the following static list when appropriate: ‚Ä¢ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸÖŸÉÿßÿ™ÿ® ŸàÿßŸÑÿ¥ÿ±ŸÉÿßÿ™
    ‚Ä¢ ÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÜÿ∏ÿßŸÅÿ© ÿßŸÑŸäŸàŸÖŸäÿ© ÿ£Ÿà ÿßŸÑÿ£ÿ≥ÿ®ŸàÿπŸäÿ©
    ‚Ä¢ ÿ™ŸÜÿ∏ŸäŸÅ ŸÖÿß ÿ®ÿπÿØ ÿßŸÑÿ®ŸÜÿßÿ°
    ‚Ä¢ ÿ™ÿπŸÇŸäŸÖ ÿßŸÑÿ£ÿ≥ÿ∑ÿ≠ ŸàÿßŸÑŸÖŸÉÿßÿ™ÿ®
    ‚Ä¢ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿ£ÿ±ÿ∂Ÿäÿßÿ™ ŸàÿßŸÑÿ≥ÿ¨ÿßÿØ ÿ®ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©
    When the user asks for a price quotation, price list, or any query related to pricing for a service, you must always do the following:
    1. Respond with a polite and professional message saying that the price list PDF will be sent.
    2. Use ONLY this exact tag on a separate line when user asks for price list: [send_presentation_pdf]

    Maintain memory and context of the conversation during the interaction.
    
    When the user thanks you for your help (e.g., saying "ÿ¥ŸÉÿ±Ÿãÿß" or "ÿ¥ŸÉÿ±Ÿãÿß ŸÖÿ≥ÿßÿπÿØ"), clear the memory and reset the context.
    
    Keep the conversation focused, relevant, and within the current business scope.
    EOT
        ];

        $messages = array_merge([$systemPrompt], $history, [['role' => 'user', 'content' => $message]]);

        $payload = [
            'model' => 'deepseek/deepseek-chat:free',
            'messages' => $messages,
            'temperature' => 0.8,
            'max_tokens' => 300,
        ];

        $url = 'https://openrouter.ai/api/v1/chat/completions';

        try {
            Log::info('üì§ Sending request to OpenRouter', ['url' => $url, 'payload' => $payload]);

            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $apiKey,
                'Content-Type' => 'application/json',
                'HTTP-Referer' => 'https://yourdomain.com', // ‚úÖ Update this to your real domain
            ])->post($url, $payload);

            Log::debug('üìÑ Raw response from OpenRouter: ' . $response->body());

            if ($response->successful()) {
                $data = $response->json();
                $aiReply = $data['choices'][0]['message']['content'] ?? null;

                if (!$aiReply) {
                    Log::warning('‚ö†Ô∏è AI response missing', ['response' => $data]);
                    return 'ŸÑŸÖ ÿ£ŸÅŸáŸÖ ÿ™ŸÖÿßŸÖŸãÿßÿå ŸÖŸÖŸÉŸÜ ÿ™Ÿàÿ∂ÿ≠ ÿ£ŸÉÿ´ÿ±ÿü';
                }

                // üíæ Save to memory
                $this->memoryService->saveMessage($sender, $message, $aiReply);

                // üß† Trigger PDF send if requested
                if (preg_match('/\[send_presentation_pdf\]/', $aiReply)) {
                    Log::info('üìé Presentation request detected, sending PDF to user', ['number' => $sender]);
                    $this->sendPresentationPdf($sender);
                    $aiReply = preg_replace('/\[send_presentation_pdf\]/', '', $aiReply);
                }                

                return trim($aiReply);
            }

            Log::warning('‚ö†Ô∏è OpenRouter API error', [
                'status' => $response->status(),
                'response' => $response->body()
            ]);

            return 'ÿπÿ∞ÿ±Ÿãÿßÿå ÿßŸÑŸÜÿ∏ÿßŸÖ ŸÖÿ¥ÿ∫ŸàŸÑ ÿ≠ÿßŸÑŸäŸãÿß. ÿ≠ÿßŸàŸÑ ÿ®ÿπÿØ ŸÇŸÑŸäŸÑ.';
        } catch (\Exception $e) {
            Log::error('‚ùå Exception calling OpenRouter', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ∑ŸÑÿ®. ÿ≠ÿßŸàŸÑ ŸÖÿ¨ÿØÿØŸãÿß.';
        }
    }

    private function sendPresentationPdf(string $number)
    {
        $mediaId = $this->uploadPresentationPdf();
    
        if (!$mediaId) {
            Log::error('‚ùå Failed to upload PDF, cannot send document.');
            return;
        }
    
        try {
            $token = env('WHATSAPP_TOKEN');
            $phoneNumberId = env('WHATSAPP_PHONE_ID');
            $url = "https://graph.facebook.com/v22.0/{$phoneNumberId}/messages";
    
            $response = Http::withToken($token)->post($url, [
                'messaging_product' => 'whatsapp',
                'to' => $number,
                'type' => 'document',
                'document' => [
                    'id' => $mediaId,
                    'filename' => 'ÿπÿ±ÿ∂_ÿÆÿØŸÖÿßÿ™_JanPro.pdf',
                    'caption' => 'üìé ÿ™ŸÅÿ∂ŸÑÿå Ÿáÿ∞ÿß ŸÖŸÑŸÅ ÿ™ÿπÿ±ŸäŸÅŸä ÿπŸÜ ÿ¥ÿ±ŸÉÿ© JanPro.',
                ]
            ]);
    
            if ($response->successful()) {
                Log::info('‚úÖ Presentation PDF sent successfully.', $response->json());
            } else {
                Log::warning('‚ö†Ô∏è Failed to send presentation PDF.', [
                    'status' => $response->status(),
                    'response' => $response->body()
                ]);
            }
        } catch (\Exception $e) {
            Log::error('‚ùå Exception while sending presentation PDF.', [
                'error' => $e->getMessage()
            ]);
        }
    }
    

    private function uploadPresentationPdf(): ?string
{
    try {
        $pdfPath = storage_path('app/pdf/presentation.pdf');

        if (!file_exists($pdfPath)) {
            Log::error('‚ùå Presentation PDF not found.', ['path' => $pdfPath]);
            return null;
        }

        $token = env('WHATSAPP_TOKEN');
        $phoneNumberId = env('WHATSAPP_PHONE_ID');
        $url = "https://graph.facebook.com/v22.0/{$phoneNumberId}/media";

        $response = Http::withToken($token)->attach(
            'file',
            file_get_contents($pdfPath),
            'presentation.pdf'
        )->post($url, [
            'messaging_product' => 'whatsapp',
            'type' => 'document',
        ]);

        if ($response->successful()) {
            $mediaId = $response->json()['id'] ?? null;
            Log::info('‚úÖ PDF uploaded to WhatsApp successfully.', ['media_id' => $mediaId]);
            return $mediaId;
        }

        Log::warning('‚ö†Ô∏è Failed to upload presentation PDF.', [
            'status' => $response->status(),
            'response' => $response->body()
        ]);
    } catch (\Exception $e) {
        Log::error('‚ùå Exception while uploading PDF.', ['error' => $e->getMessage()]);
    }

    return null;
}

}
